@startuml
package "Backend" {
  class Uniterm {
    -id: Long
    -name: String
    -expression: String
    -description: String
  }
  
  interface UnitermRepository {
    +findAll(): List<Uniterm>
    +findById(id: Long): Optional<Uniterm>
    +save(uniterm: Uniterm): Uniterm
    +existsById(id: Long): boolean
    +deleteById(id: Long): void
  }
  
  class UnitermService {
    +findAll(): List<Uniterm>
    +findById(id: Long): Optional<Uniterm>
    +save(uniterm: Uniterm): Uniterm
    +existsById(id: Long): boolean
    +deleteById(id: Long): void
  }
  
  class UnitermController {
    +getAllUniterms(): List<Uniterm>
    +getUnitermById(id: Long): ResponseEntity<Uniterm>
    +createUniterm(uniterm: Uniterm): Uniterm
    +updateUniterm(id: Long, uniterm: Uniterm): ResponseEntity<Uniterm>
    +deleteUniterm(id: Long): ResponseEntity<Void>
  }
}

package "Frontend" {
  enum OperationType {
    SEQUENCE
    PARALLEL
  }
  
  interface Uniterm {
    id?: number
    name: string
    expression: string
    separator?: string
    isTransformed?: boolean
    operationType?: OperationType
  }
  
  class UnitermService {
    +getUniterms(): Observable<Uniterm[]>
    +getUnitermById(id: number): Observable<Uniterm>
    +saveUniterm(uniterm: Uniterm): Observable<Uniterm>
    +deleteUniterm(id: number): Observable<void>
  }
  
  class UnitermVisualizationComponent {
    +uniterms: Uniterm[]
    +operationType: 'PARALLEL' | 'SEQUENCE'
    +separator: string
    +drawParallelOperation()
    +drawSequentialOperation()
  }
  
  class UnitermMergeVisualizationComponent {
    +parallelUniterms: Uniterm[]
    +sequentialUniterms: Uniterm[]
    +separator: string
    +drawMergedVisualization(index: number)
    +selectReplacement(index: number)
  }
}

UnitermService --> UnitermRepository
UnitermController --> UnitermService
@enduml