@startuml
actor Użytkownik
participant "UnitermVisualisationControllerComponent" as UVCC
participant "AddUnitermDialogComponent" as AUDC
participant "UnitermVisualisationComponent" as UVC
participant "UnitermMergeVisualizationComponent" as UMVC
participant "UnitermService" as US
participant "Backend" as BE
participant "Baza Danych" as DB

Użytkownik -> UVCC: Wyświetl stronę aplikacji
UVCC -> US: getUniterms()
US -> BE: HTTP GET /api/uniterms
BE -> DB: Zapytanie o unitermy
DB --> BE: Zwrócenie wyrażeń
BE --> US: Zwrócenie listy wyrażeń
US --> UVCC: Aktualizacja listy wyrażeń
 
Użytkownik -> UVCC: Kliknięcie "Dodaj nowe wyrażenie"
UVCC -> AUDC: Otwarcie dialogu
Użytkownik -> AUDC: Wprowadzenie wyrażenia (parallelPart1, parallelPart2, separator)
Użytkownik -> AUDC: Wprowadzenie sekwencyjnego wyrażenia (sequentialPart1, sequentialPart2, separator)
AUDC -> US: saveUniterm(noweWyrażenie)
US -> BE: HTTP POST /api/uniterms
BE -> DB: Zapisanie wyrażenia
DB --> BE: Potwierdzenie zapisu
BE --> US: Zwrócenie zapisanego wyrażenia
US --> UVCC: Odświeżenie listy wyrażeń

Użytkownik -> UVCC: Wybór wyrażenia z listy
UVCC -> UVCC: Przetworzenie na parallelUniterms i sequentialUniterms
UVCC -> UVC: Przekazanie [uniterms] dla zrównoleglenia
UVC -> UVC: drawParallelOperation() na canvas
UVC --> UVCC: Wyświetlenie wizualizacji zrównoleglenia

UVCC -> UVC: Przekazanie [uniterms] dla sekwencjonowania
UVC -> UVC: drawSequentialOperation() na canvas
UVC --> UVCC: Wyświetlenie wizualizacji sekwencjonowania

UVCC -> UMVC: Przekazanie parallelUniterms, sequentialUniterms i separatorów
UMVC -> UMVC: drawVisualizations() (oba warianty transformacji)
UMVC --> UVCC: Automatyczne wyświetlenie transformacji
UMVC -> UVCC: emitSelection() z informacją o transformacji
@enduml 